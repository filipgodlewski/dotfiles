#!/usr/bin/env python3
import argparse
import os
import sys
from subprocess import run

CFG = "/usr/bin/git --git-dir=$HOME/.cfg --work-tree=$HOME"
DIRS = {
    "colorschemes": "share/colorschemes",
    "nvim": "share/nvim/site/pack/plugins/start",
    "tmux": "share/tmux",
    "zsh": "share/zsh/plugins",
}
ABS_LOCAL = os.path.expanduser("~/.local")


def get_dirs_help():
    dirs = ", ".join(DIRS.keys())
    return f"Possible arguments: {dirs}"


def get_folder_path(args):
    out = args.REPO.split("/")
    folder = DIRS.get(args.folder, "")
    path = os.path.join(folder, out[-1])
    return path


def get_from_repo(args):
    if args.repository.endswith(".git") or args.repository.startswith(
            "https://github.com/"):
        sys.exit(sys.stderr.write("Not a proper repository name!\n"))
    return args.repository


def main(args):
    path = get_folder_path(args)
    link = "https://github.com/" + args.REPO + ".git"
    abs_path = os.path.join(ABS_LOCAL, path)
    run(f"{CFG} submodule add {link} {path}", shell=True, cwd=ABS_LOCAL)
    run(f"{CFG} submodule init", shell=True, cwd=abs_path)


def parse_argv():
    parser = argparse.ArgumentParser()
    parser.add_argument("--folder", "-f", help=get_dirs_help(), required=True)
    parser.add_argument(
        "REPO", help="Repository name in the 'author/repository' format")
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    main(parse_argv())
