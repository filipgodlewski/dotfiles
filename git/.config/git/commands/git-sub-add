#!/usr/bin/env python3

from os.path import expanduser, join
from typing import Dict, Tuple

import click
from git import Repo

DOTFILES_PATH = join(expanduser("~"), "dotfiles")
DIRS: Dict[str, str] = {
    "alacritty": "share/alacritty",
    "nvim": "share/nvim/site/pack/plugins/start",
    "tmux": "share/tmux",
    "zsh": "share/zsh/plugins",
    "other": "share/other",
}
GH_DOMAIN = "https://github.com/"
GH_OBJECT = ".git"


def get_submodule_info(folder: str, target: str) -> Tuple[str, str, str]:
    """Gets necessary Github information based on the repository name and end dir."""

    cleaned_target: str = target[:-1] if target.endswith(GH_OBJECT + "/") else target
    is_gh_domain: bool = cleaned_target.startswith(GH_DOMAIN)
    is_gh_object: bool = cleaned_target.endswith(GH_OBJECT)
    if is_gh_domain and is_gh_object:
        url: str = cleaned_target
    elif is_gh_domain and not is_gh_object:
        url: str = cleaned_target + GH_OBJECT
    elif is_gh_object:
        url: str = GH_DOMAIN + cleaned_target
    else:
        url: str = GH_DOMAIN + cleaned_target + GH_OBJECT
    name: str = cleaned_target.split("/")[-1]
    name: str = name[:-4] if is_gh_object else name
    relative_path: str = join(folder, ".local", join(DIRS[folder], name))
    return url, name, relative_path


@click.command()
@click.option("--folder", "-f", help="folder to add submodule to", required=True,
              type=click.Choice([d for d in DIRS], case_sensitive=True))
@click.argument("target")
def main(folder: str, target: str):
    """Add new submodule to the dotfiles.

    TARGET: 'author/repository' format or address under Github domain"""

    if folder not in DIRS:
        raise KeyError(f"{folder} not in dirs. Use `--help` flag for more information")
    url, name, relative_path = get_submodule_info(folder, target)
    r = Repo(DOTFILES_PATH)
    r.create_submodule(name=relative_path, path=relative_path, url=url)
    click.secho("\nAdded new submodule.\n", fg="green")
    click.secho(f"Name: {name}", fg="yellow")
    click.echo(f"Path: {relative_path}")
    click.echo(f"URL: {url}")
    r.submodule_update(recursive=True, force_remove=True, init=True, force_reset=True)
    click.secho("\nUpdated recursively all submodules.", fg="green")


if __name__ == "__main__":
    main()
